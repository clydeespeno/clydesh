#!/usr/bin/env bash

# use the first container if -c is not set
file=""
template=""
template_type=""
substitute="false"
_env_vars=""
image=""
args=()
dry="false"
node=""
pod_node=""

for i in "$@"; do
  case $i in
    --i=*|--image=*)
      image="${i#*=}"
      shift;;
    --node=*)
      node="${i#*=}"
      shift;;
    --pod-node=*)
      pod_node="${i#*=}"
      shift;;
    -)
      file="-"
      shift;;
    -f=*)
      file="${i#*=}"
      shift;;
    --dry)
      dry=true
      shift;;
    -D*)
      substitute=true
      # get all string after -D
      _arg="${i#-D*}"
      # var name is the string before =, with _replace_ prefix
      _var="_replace_${_arg%%=*}"
      # value is the string after =
      _val="${_arg#*=}"
      # export the variable, so envsubst can use it
      export $_var="$_val"
      _env_vars="\$${_var} $_env_vars"
      shift;;
    --subst)
      substitute=true
      shift;;
    --template=*)
      file="$KUBE_ARTIFACTS_DIR/template/${i#*=}"
      if [[ -f "$file.yaml" ]]; then
        template_type="yaml"
        file="$file.yaml"
      elif [[ -f "$file.json" ]]; then
        template_type="json"
        file="$file.json"
      fi
      shift;;
    *)
      args+=("$i")
      shift
      ;;
  esac
done

overrides=""

if [[ $file == "-" ]] || [[ -f $file ]]; then
  overrides=$(cat $file)
  if [[ $substitute == "true" ]]; then
    overrides=$(envsubst "$_env_vars" <<< "$overrides")
  fi

  # transform yaml to json
  if [[ $template_type == "yaml" ]]; then
    overrides=$(echo "$overrides" | yq -o=json)
  fi

  overrides=$(echo "$overrides" | jq -c '.')

  # try to get the image from the template from the overrides if it doesn't exist
  if [[ -z $image ]]; then
    image=$(echo "$overrides" | jq -r '.spec.containers[0].image')
  fi
fi

if [[ -n $pod_node ]]; then
  node=$(k-pod --no-headers -o custom-columns=:spec.nodeName $pod_node)
fi

if [[ -n $node ]]; then
  [[ -z $overrides ]] && overrides="{}"
  overrides=$(echo "$overrides" | jq --arg node $node '.spec.nodeName = $node')
fi


if [[ -z $image ]]; then
  echo "Image is not set. Either ensure that you have an image in overrides or supply it via --i or --image"
  exit 1
fi

# shellcheck disable=SC2145
[[ $KUBE_COMMAND_SHOW != false ]] && >&2 echo "kubectl $(_k8_flag ctx) $(_k8_flag ns) run --overrides='$overrides' -i --tty --image=$image ${args[@]}"

# shellcheck disable=SC2046
[[ $dry == "false" ]] && kubectl $(_k8_flag ctx) $(_k8_flag ns) run --overrides="$overrides" -i --tty --image=$image ${args[@]}
