#!/usr/bin/env bash

function _k8_resource_completion() {
  local _cmd=${COMP_WORDS[0]}
  resource=$(grep $_cmd < $KUBE_ARTIFACTS_DIR/dyn_render_func_mapping | head -n 1 | awk '{print $1}')
  if [[ -n $resource ]]; then
    COMPREPLY=($(compgen -W "$(_k8_cached_get $resource)"))
  fi
}

while read -r line; do
  complete -F _k8_resource_completion $(echo "$line")
done < $KUBE_ARTIFACTS_DIR/dyn_render_func_mapping

function _k_ns_completion() {
  local namespaces=$(KUBE_COMMAND_SHOW=false kg ns --no-headers -o custom-columns=:metadata.name)
  COMPREPLY=($(compgen -W "$namespaces"))
  return 0
}

function _k_yaml_completion() {
  local files=$(ls -p | grep "\.yaml")
  COMPREPLY=($(compgen -W "$files"))
  return 0
}

function _k_ctx_completion() {
  local ctxs=""
  if [[ -f "$HOME/.kube/config" ]]; then
    ctxs=$(yq -r '.contexts[].name' "$HOME/.kube/config")
  else
    ctxs=$(kubectl config view -o json | jq -r '.contexts[].name')
  fi
  COMPREPLY=($(compgen -W "$ctxs"))
  return 0
}

function _k_fwd_completion() {
  local reply=""
  if [ ${COMP_CWORD} == "1" ]; then
    COMPREPLY=($(compgen -W "$(_k8_cached_get pod)"))
  elif [ ${COMP_CWORD} == "2" ]; then
    COMPREPLY=($(compgen -W "$(ls ${KUBE_ARTIFACTS_DIR}/ports)"))
  fi
}

function _ks_completion() {
  COMPREPLY=($(compgen -W "$(ls ${KUBE_ARTIFACTS_DIR}/aliases)"))
}

function _k_resource_completion() {
  local reply=""
  if [ ${COMP_CWORD} == "1" ]; then
    COMPREPLY=($(compgen -W "$(_k8_cached_get api-resources --ttl=86400)"))
  elif [ ${COMP_CWORD} == "2" ]; then
    resource=${COMP_WORDS[$COMP_CWORD-1]}
    COMPREPLY=($(compgen -W "$(_k8_cached_get $resource)"))
  fi
}

function _k_node_completion() {
  local nodes=$(KUBE_COMMAND_SHOW=false kg node --no-headers -o custom-columns=:metadata.name)
  COMPREPLY=($(compgen -W "$nodes"))
  return 0
}

function _k_cron_completion() {
  local cron=$(KUBE_COMMAND_SHOW=false kng cronjob --no-headers -o custom-columns=:metadata.name)
  COMPREPLY=($(compgen -W "$cron"))
  return 0
}

function _k_ss_completion() {
  local ss=$(KUBE_COMMAND_SHOW=false kng statefulset --no-headers -o custom-columns=:metadata.name)
  COMPREPLY=($(compgen -W "$ss"))
  return 0
}

complete -F _k_ctx_completion k-ctx
complete -F _k_fwd_completion k-fwd
complete -F _ks_completion ks
complete -F _k_resource_completion knd kd kne ke knx kx
complete -F _k_node_completion k-npod
