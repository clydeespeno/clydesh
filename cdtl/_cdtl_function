#!/usr/bin/env bash

source "$CLYDESH_HOME/utils.sh"

function cdtl_usage() {
  cat <<EOF
cdtl allows you to perform actions in a given template directory.
The template directory is defined by the \${CDTL_REGEX} variable
EOF
}

function cdtl() {
  case "$1" in
    cd)
      _cdtl_chdir "${@:2}"
      ;;
    cmd|x)
      _cdtl_eval "${@:2}"
      ;;
    ..)
      if [[ -n $CDTL_BASE ]] && [[ -d $CDTL_BASE ]]; then
        >&2 echo "Changing to base directory: $CDTL_BASE"
        cd "$CDTL_BASE" || return
      else
        >&2 echo "\$CDTL_BASE ($CDTL_BASE) is not a valid directory. Doing nothing."
      fi
      ;;
    *)
      # if it's an unknown command, we default to use `cd`
      _cdtl_chdir "$@"
      ;;
  esac
}

function _cdtl_chdir() {
  # shellcheck disable=SC2068
  colored="$(_cdtl_dir $@)"
  # remove color codes
  uncolored="$(uncolor "$colored")"
  if [[ -d "$uncolored" ]]; then
    >&2 echo "Changing directory $colored"
    # shellcheck disable=SC2086
    # shellcheck disable=SC2164
    cd "$uncolored"
  else
    >&2 echo "$colored is not a directory"
  fi
}

function _cdtl_eval() {
  filter=$(_cdtl_filters "$@")
  dir=$(echo "$filter" | jq -cr '._dir')
  local cmd
  [[ "$dir" == "null" ]] && dir=$PWD

  curr_dir=$PWD

  _cdtl_debug "Using $dir as basis for evaluation."
  _cdtl_debug "Using filter $filter"

  for d in $(_cdtl_dirs "$dir"); do
    dir_filter=$(_cdtl_eval_dir_filter --filter="$filter" --dir="$d")
    _cdtl_debug "Checking if $d matches the filter $dir_filter"
    if [[ $(echo "$dir_filter" | jq -r ".matches") == "true" ]]; then
      cd "$d" || exit
      >&2 echo "Running command(s) in $d"
      # we need to use read to split the cmds into line separate commands
      while IFS=$'\n' read -r cmd; do
        >&2 echo "evaluating '$cmd'"
        eval "$cmd"
      done < <(echo "${dir_filter}" | jq -rc '.filter._cmds[]')
    fi
  done

  cd "$curr_dir" || exit
}