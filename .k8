k8_set_cluster() {
  kubectl config set-cluster $1 --server=$2 --insecure-skip-tls-verify=true
  $REDMART_SCRIPTS_HOME/redmart-k8s-login_darwin_amd64 --write
  kubectl config set-context $1 --cluster=$1 --user=clyde@redmart.com
}

k8_set_dev() {
  k8_set_cluster alpha https://k8s-api.microservices.alpha.rm.sg
}

k8_set_prod() {
  k8_set_cluster production https://k8s-api.microservices.rm.sg
}

k8_use_dev() {
  kubectl config use-context alpha
}

k8_use_prod() {
  kubectl config use-context production
}

k8_log_service() {
  name=`echo $1 | perl -n -e '/^(.*?-(service|processor|api)).*/ && print $1'`
  echo "kubectl logs $1 -c $name -n microservice ${@:2}"
  kubectl logs $1 -c $name -n microservice ${@:2}
}

k8_get_service() {
  output=`kubectl get pods -n microservice`
  echo $output | head -n 1
  if [ ! -z $1 ]; then
    echo $output | tail -n +2 | grep $1
  else
    echo $output | tail -n +2 
  fi
}

k8_get_events() {
  echo "kubectl get events -n microservice"
  output=`kubectl get events -n microservice`
  echo $output | head -n 1
  if [ ! -z $1 ]; then
    echo $output | tail -n +2 | grep $1
  else
    echo $output | tail -n +2
  fi
}

k8_get_cron() {
  output=`kubectl get cronjobs -n microservice`
  echo $output | head -n 1
  if [ ! -z $1 ]; then
    echo $output | tail -n +2 | grep $1
  else
    echo $output | tail -n +2
  fi
}

k8_delete_pod() {
  echo "kubectl -n microservice delete pod $1"
  kubectl -n microservice delete pod $1
}

k8_desc_service() {
  echo "kubectl describe pod $1 -n microservice ${@:2}"
  kubectl describe pod $1 -n microservice ${@:2}
}

_k8_completion() {
  local services=`kubectl get pods -n microservice | awk 'FNR > 1 {print $1}'`
  COMPREPLY=($(compgen -W "$services"))
  return 0
} && complete -F _k8_completion k8_log_service k8_desc_service k8_delete_pod
